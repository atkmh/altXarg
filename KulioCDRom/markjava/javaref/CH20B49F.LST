listing 1
public boolean action(Event evtObj, Object arg) {
    if( ... ) {
      // handle event
      return true;
    }
    return false;
  }

listing 2
// Demonstrate Labels
import java.awt.*;
import java.applet.*;
/*
  <applet code="LabelDemo" width=300 height=200>
  </applet>
*/

public class LabelDemo extends Applet {
  public void init() {
    Label one = new Label("One");
    Label two = new Label("Two");
    Label three = new Label("Three");

    // add labels to applet window
     add(one);
     add(two);
     add(three);
  }
}

listing 3
// Demonstrate Buttons
import java.awt.*;
import java.applet.*;
/*
  <applet code="ButtonDemo" width=250 height=150>
  </applet>
*/

public class ButtonDemo extends Applet {
  String msg = "";

  public void init() {
    Button yes = new Button("Yes");
    Button no = new Button("No");
    Button maybe = new Button("Undecided");

    add(yes);
    add(no);
    add(maybe);
  }

  // Recognize buttons by their labels.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof Button) {
      if(arg.equals("Yes"))
        msg = "You pressed Yes.";
      else if(arg.equals("No"))
        msg = "You pressed No.";
      else if(arg.equals("Undecided"))
        msg = "You pressed Undecided.";

      repaint();
      return true;
    }
    return false;
  }

  public void paint(Graphics g) {
     g.drawString(msg, 6, 100);
  }
}

listing 4
// Recognize Button objects.
import java.awt.*;
import java.applet.*;
/*
  <applet code="ButtonList" width=250 height=150>
  </applet>
*/

public class ButtonList extends Applet {
  String msg = "";
  Button bList[] = new Button[3];

  public void init() {
    Button yes = new Button("Yes");
    Button no = new Button("No");
    Button maybe = new Button("Undecided");

    // store references to buttons as added
    bList[0] = (Button) add(yes);
    bList[1] = (Button) add(no);
    bList[2] = (Button) add(maybe);
  }

  // Determine button by object.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof Button) {
      for(int i=0; i<3; i++) {
        if(evtObj.target == bList[i]) {
          msg = "You pressed " + bList[i].getLabel();
          break;
        }
      }
      repaint();
      return true;
    }
    return false;
  }

  public void paint(Graphics g) {
     g.drawString(msg, 6, 100);
  }
}


listing 5
// Demonstrate check boxes.
import java.awt.*;
import java.applet.*;
/*
  <applet code="CheckboxDemo" width=250 height=200>
  </applet>
*/

public class CheckboxDemo extends Applet {
  String msg = "";
  Checkbox win95, winNT, solaris, mac;

  public void init() {
    win95 = new Checkbox("Windows 95", null, true);
    winNT = new Checkbox("Windows NT");
    solaris = new Checkbox("Solaris");
    mac = new Checkbox("MacOS");

    add(win95);
    add(winNT);
    add(solaris);
    add(mac);
  }

  // Repaint when status of check box changes. 
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof Checkbox) {
      repaint();
      return true;
    }
    return false;
  }

  // Display current state of the check boxes.
  public void paint(Graphics g) {
    msg = "Current state: ";
    g.drawString(msg, 6, 80);
    msg = "  Windows 95: " + win95.getState();
    g.drawString(msg, 6, 100);
    msg = "  Windows NT: " + winNT.getState();
    g.drawString(msg, 6, 120);
    msg = "  Solaris: " + solaris.getState();
    g.drawString(msg, 6, 140);
    msg = "  MacOS: " + mac.getState();    
    g.drawString(msg, 6, 160);
  }
}


listing 6
// Demonstrate check box group.
import java.awt.*;
import java.applet.*;
/*
  <applet code="CBGroup" width=250 height=200>
  </applet>
*/

public class CBGroup extends Applet {
  String msg = "";
  Checkbox win95, winNT, solaris, mac;
  CheckboxGroup cbg;

  public void init() {
    cbg = new CheckboxGroup();

    win95 = new Checkbox("Windows 95", cbg, true);
    winNT = new Checkbox("Windows NT", cbg, false);
    solaris = new Checkbox("Solaris", cbg, false);
    mac = new Checkbox("MacOS", cbg, false);

    add(win95);
    add(winNT);
    add(solaris);
    add(mac);
  }

  // Repaint when state of check box changes.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof Checkbox) {
      repaint();
      return true;
    }
    return false;
  }

  // Display current state of the check boxes.
  public void paint(Graphics g) {
    msg = "Current selection: ";
    msg += cbg.getCurrent().getLabel();
    g.drawString(msg, 6, 100);
  }
}

listing 7
// Demonstrate Choice lists.
import java.awt.*;
import java.applet.*;
/*
  <applet code="ChoiceDemo" width=300 height=180>
  </applet>
*/

public class ChoiceDemo extends Applet {
  Choice os, browser;
  String msg = "";

  public void init() {
    os = new Choice();
    browser = new Choice();
    
    // add items to os list
    os.addItem("Windows 95");
    os.addItem("Windows NT");
    os.addItem("Solaris");
    os.addItem("MacOS");

    // add items to browser list
    browser.addItem("Netscape 1.1");
    browser.addItem("Netscape 2.x");
    browser.addItem("Internet Explorer 2.0");
    browser.addItem("Internet Explorer 3.0");
    browser.addItem("Lynx 2.4");
    browser.select("Netscape 2.x");

    // add choice lists to window
    add(os);
    add(browser);
  }

  // Repaint when a selection has been made.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof Choice) {
      repaint();
      return true;
    }
    return false;
  }

  // Display current selections.
  public void paint(Graphics g) {
    msg = "Current OS: ";
    msg += os.getSelectedItem();
    g.drawString(msg, 6, 120);
    msg = "Current Browser: ";
    msg += browser.getSelectedItem();
    g.drawString(msg, 6, 140);
  }
}

listing 8
// Demonstrate Lists.
import java.awt.*;
import java.applet.*;
/*
  <applet code="ListDemo" width=300 height=180>
  </applet>
*/

public class ListDemo extends Applet {
  List os, browser;
  String msg = "";

  public void init() {
    os = new List(4, true);
    browser = new List(4, false);
    
    // add items to os list
    os.addItem("Windows 95");
    os.addItem("Windows NT");
    os.addItem("Solaris");
    os.addItem("MacOS");

    // add items to browser list
    browser.addItem("Netscape 1.1");
    browser.addItem("Netscape 2.x");
    browser.addItem("Internet Explorer 2.0");
    browser.addItem("Internet Explorer 3.0");
    browser.addItem("Lynx 2.4");
    browser.select(1);

    // add lists to window
    add(os);
    add(browser);
  }

  // Repaint when user double-clicks on a selection.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof List) {
      repaint();
      return true;
    }
    return false;
  }

  // Display current selections.
  public void paint(Graphics g) {
    int idx[];

    msg = "Current OS: ";
    idx = os.getSelectedIndexes();
    for(int i=0; i<idx.length; i++)
      msg += os.getItem(idx[i]) + "  ";
    g.drawString(msg, 6, 120);
    msg = "Current Browser: ";
    msg += browser.getSelectedItem();
    g.drawString(msg, 6, 140);
  }
}

listing 9
// Demonstrate scroll bars.
import java.awt.*;
import java.applet.*;
/*
  <applet code="SBDemo" width=300 height=200>
  </applet>
*/

public class SBDemo extends Applet {
  String msg = "";
  Scrollbar vertSB, horzSB;

  public void init() {
    int width = Integer.parseInt(getParameter("width"));
    int height = Integer.parseInt(getParameter("height"));
 
    vertSB = new Scrollbar(Scrollbar.VERTICAL,
                           0, 1, 0, height);
    horzSB = new Scrollbar(Scrollbar.HORIZONTAL,
                           0, 1, 0, width);

    add(vertSB);
    add(horzSB);
  }

  // Repaint window whenever scroll bars are moved.
  public boolean handleEvent(Event evtObj) {
    if(evtObj.target instanceof Scrollbar) {
      repaint();
      return true;
    }

    return super.handleEvent(evtObj);
  }

  // Update scroll bars to reflect mouse dragging.
  public boolean mouseDrag(Event evtObj, int x, int y) {
    vertSB.setValue(y);
    horzSB.setValue(x);
    repaint();
    return true;
  } 

  // Display current value of scroll bars.
  public void paint(Graphics g) {
     msg = "Vertical: " + vertSB.getValue();
     msg += ",  Horizontal: " + horzSB.getValue();
     g.drawString(msg, 6, 160);

     // show current mouse drag position
     g.drawString("*", horzSB.getValue(),
                  vertSB.getValue());
  }
}


listing 10
// Demonstrate text field.
import java.awt.*;
import java.applet.*;
/*
  <applet code="TextFieldDemo" width=380 height=150>
  </applet>
*/

public class TextFieldDemo extends Applet {
  TextField name, pass;
  
  public void init() {
    Label namep = new Label("Name: ", Label.RIGHT);
    Label passp = new Label("Password: ", Label.RIGHT);
    name = new TextField(12);
    pass = new TextField(8);
    pass.setEchoCharacter('?');

    add(namep);
    add(name);
    add(passp);
    add(pass);
  }

  // User pressed Enter.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof TextField) {
      repaint();
      return true;
    }
    return false;
  }

  public void paint(Graphics g) {
     g.drawString("Name: " + name.getText(), 6, 60);
     g.drawString("Selected text in name: "
                  + name.getSelectedText(), 6, 80);
     g.drawString("Password: " + pass.getText(), 6, 100);
  }
}

listing 11
// Demonstrate TextArea.
import java.awt.*;
import java.applet.*;
/*
  <applet code="TextAreaDemo" width=300 height=250>
  </applet>
*/

public class TextAreaDemo extends Applet {
  public void init() {
    String val = "There are two ways of constructing " +
      "a software design.\n" +
      "One way is to make it so simple\n" +
      "that there are obviously no deficiencies.\n" +
      "And the other way is to make it so complicated\n" +
      "that there are no obvious deficiencies.\n\n" +
      "        -C.A.R. Hoare\n\n" +
      "There's an old story about the person who wished\n" +
      "his computer were as easy to use as his telephone.\n" +
      "That wish has come true,\n" +
      "since I no longer know how to use my telephone.\n\n" +
      "        -Bjarne Stroustrup, AT&T, (inventor of C++)";

    TextArea text = new TextArea(val, 10, 30);
    add(text);
  }
}

listing 12
// Use left-aligned flow layout.
import java.awt.*;
import java.applet.*;
/*
  <applet code="FlowLayoutDemo" width=250 height=200>
  </applet>
*/

public class FlowLayoutDemo extends Applet {
  String msg = "";
  Checkbox win95, winNT, solaris, mac;

  public void init() {
    // set left-aligned flow layout
    setLayout(new FlowLayout(FlowLayout.LEFT));

    win95 = new Checkbox("Windows 95", null, true);
    winNT = new Checkbox("Windows NT");
    solaris = new Checkbox("Solaris");
    mac = new Checkbox("MacOS");

    add(win95);
    add(winNT);
    add(solaris);
    add(mac);
  }

  // Repaint when status of a check box changes.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof Checkbox) {
      repaint();
      return true;
    }
    return false;
  }

  // Display current state of the checkboxes.
  public void paint(Graphics g) {
    msg = "Current state: ";
    g.drawString(msg, 6, 80);
    msg = "  Windows 95: " + win95.getState();
    g.drawString(msg, 6, 100);
    msg = "  Windows NT: " + winNT.getState();
    g.drawString(msg, 6, 120);
    msg = "  Solaris: " + solaris.getState();
    g.drawString(msg, 6, 140);
    msg = "  Mac: " + mac.getState();    
    g.drawString(msg, 6, 160);
  }
}

listing 13
// Demonstrate BorderLayout.
import java.awt.*;
import java.applet.*;
import java.util.*;
/*
  <applet code="BorderLayoutDemo" width=400 height=200>
  </applet>
*/

public class BorderLayoutDemo extends Applet {
  public void init() {
    setLayout(new BorderLayout());

    add("North", new Button("This is across the top."));
    add("South", new Label("The footer message might go here."));
    add("East", new Button("Right"));
    add("West", new Button("Left"));

    String msg = "The reasonable man adapts " +
      "himself to the world;\n" +
      "the unreasonable one persists in " +
      "trying to adapt the world to himself.\n" +
      "Therefore all progress depends " +
      "on the unreasonable man.\n\n" +
      "        - George Bernard Shaw\n\n";

    add("Center", new TextArea(msg));
  }
}

listing 14
// Demonstrate BorderLayout with insets.
import java.awt.*;
import java.applet.*;
import java.util.*;
/*
  <applet code="InsetsDemo" width=400 height=200>
  </applet>
*/

public class InsetsDemo extends Applet {
  public void init() {
    // set background color so insets can be easily seen
    setBackground(Color.cyan); 

    setLayout(new BorderLayout());

    add("North", new Button("This is across the top."));
    add("South", new Label("The footer message might go here."));
    add("East", new Button("Right"));
    add("West", new Button("Left"));

    String msg = "The reasonable man adapts " +
      "himself to the world;\n" +
      "the unreasonable one persists in " +
      "trying to adapt the world to himself.\n" +
      "Therefore all progress depends " +
      "on the unreasonable man.\n\n" +
      "        - George Bernard Shaw\n\n";

    add("Center", new TextArea(msg));
  }

  // add insets
  public Insets insets() {
    return new Insets(10, 10, 10, 10);
  }
}

listing 15
// Demonstrate GridLayout
import java.awt.*;
import java.applet.*;
/*
  <applet code="GridLayoutDemo" width=300 height=200>
  </applet>
*/

public class GridLayoutDemo extends Applet {
  static final int n = 4;
  public void init() {
    setLayout(new GridLayout(n, n));

    setFont(new Font("Helvetica", Font.BOLD, 24));

    for(int i = 0; i < n; i++) {
      for(int j = 0; j < n; j++) {
        int k = i * n + j;
        if(k > 0)
          add(new Button("" + k));
      }
    }
  }
}

listing 16
// Demonstrate CardLayout.
import java.awt.*;
import java.applet.*;
/*
  <applet code="CardLayoutDemo" width=300 height=100>
  </applet>
*/

public class CardLayoutDemo extends Applet {
  Checkbox win95, winNT, solaris, mac;
  Panel osCards;
  CardLayout cardLO;

  public void init() {
    Button Win = new Button("Windows");
    Button Other = new Button("Other");
    add(Win);
    add(Other);
    
    cardLO = new CardLayout();
    osCards = new Panel();
    osCards.setLayout(cardLO); // set panel layout to card layout

    win95 = new Checkbox("Windows 95", null, true);
    winNT = new Checkbox("Windows NT");
    solaris = new Checkbox("Solaris");
    mac = new Checkbox("MacOS");

    // add Windows check boxes to a panel
    Panel winPan = new Panel();
    winPan.add(win95);
    winPan.add(winNT);

    // Add other OS check boxes to a panel
    Panel otherPan = new Panel();
    otherPan.add(solaris);
    otherPan.add(mac);

    // add panels to card deck panel
    osCards.add("Windows", winPan);
    osCards.add("Other", otherPan);

    // add cards to main applet panel
    add(osCards);
  }

  // Cycle through panels.
  public boolean mouseDown(Event evtObj, int x, int y) {
    cardLO.next(osCards);
    return true;
  }

  // Display panel selected by button.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof Button) {
      if(arg.equals("Windows"))
        cardLO.show(osCards, "Windows");
      else if(arg.equals("Other")) 
        cardLO.show(osCards, "Other");
      return true;
    }
    return false;
  }
}


listing 17
// Illustrate menus.
import java.awt.*;
import java.applet.*;
/*
  <applet code="MenuDemo" width=250 height=150>
  </applet>
*/

// Create a subclass of Frame
class MenuFrame extends Frame {
  String msg = "";
  CheckboxMenuItem debug, test;

  MenuFrame(String title) {
    super(title);

    // create menu bar and add it to frame
    MenuBar mbar = new MenuBar();
    setMenuBar(mbar);

    // create the menu items
    Menu file = new Menu("File");
    file.add(new MenuItem("New..."));
    file.add(new MenuItem("Open..."));
    file.add(new MenuItem("Close"));
    file.add(new MenuItem("-"));
    file.add(new MenuItem("Quit..."));
    mbar.add(file);

    Menu edit = new Menu("Edit");
    edit.add(new MenuItem("Cut"));
    edit.add(new MenuItem("Copy"));
    edit.add(new MenuItem("Paste"));
    edit.add(new MenuItem("-"));
    Menu sub = new Menu("Special");

    sub.add(new MenuItem("First"));
    sub.add(new MenuItem("Second"));
    sub.add(new MenuItem("Third"));
    edit.add(sub);

    // these are checkable menu items
    debug = new CheckboxMenuItem("Debug");
    edit.add(debug);
    test = new CheckboxMenuItem("Testing");
    edit.add(test);

    mbar.add(edit);
  }

  // Hide window when terminated by user.
  public boolean handleEvent(Event evtObj) {
    if(evtObj.id == Event.WINDOW_DESTROY) {
      hide();
      return true;
    }      
    return super.handleEvent(evtObj);
  }

  // Display menu choices.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof MenuItem) {
      msg = "You selected ";

      if(arg.equals("New..."))
        msg += "New.";
      else if(arg.equals("Open..."))
        msg += "Open.";
      else if(arg.equals("Close"))
        msg += "Close.";
      else if(arg.equals("Quit..."))
        msg += "Quit.";
      else if(arg.equals("Edit"))
        msg += "Edit.";
      else if(arg.equals("Cut"))
        msg += "Cut.";
      else if(arg.equals("Copy"))
        msg += "Copy.";
      else if(arg.equals("Paste"))
        msg += "Paste.";
      else if(arg.equals("First"))
        msg += "First.";
      else if(arg.equals("Second"))
        msg += "Second.";
      else if(arg.equals("Third"))
        msg += "Third.";
      else if(arg.equals("Debug"))
        msg += "Debug.";
      else if(arg.equals("Testing"))
        msg += "Testing.";

      repaint();
      return true;
    }
    return false;
  }

  public void paint(Graphics g) {
    g.drawString(msg, 10, 140);

    if(debug.getState()) 
      g.drawString("Debug is on.", 10, 160);
    else
      g.drawString("Debug is off.", 10, 160);

    if(test.getState()) 
      g.drawString("Testing is on.", 10, 180);
    else
      g.drawString("Testing is off.", 10, 180);
  }    
}

// Create frame window.
public class MenuDemo extends Applet {
  Frame f;

  public void init() {
    f = new MenuFrame("Menu Demo");
    int width = Integer.parseInt(getParameter("width"));
    int height = Integer.parseInt(getParameter("height"));
 
    resize(width, height);

    f.show();
  }

  public void start() {
    f.show();
  }

  public void stop() {
    f.hide();
  }
}


listing 18
// Demonstrate Dialog box.
import java.awt.*;
import java.applet.*;
/*
  <applet code="DialogDemo" width=250 height=150>
  </applet>
*/

// Create a subclass of Dialog.
class SampleDialog extends Dialog {
  SampleDialog(Frame parent, String title) {
    super(parent, title, false);
    setLayout(new FlowLayout());
    resize(300, 200);

    add(new Label("Press this button:"));
    add(new Button("Cancel"));
  }

  // Remove dialog box when terminated by user.
  public boolean handleEvent(Event evtObj) {
    if(evtObj.id == Event.WINDOW_DESTROY) {
      dispose();
      return true;
    }      
    return super.handleEvent(evtObj);
  }

  // Watch for cancel button.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof Button) {
      if(arg.equals("Cancel")) {
        dispose();
      }
      return true;
    }
    return false;
  }

  public void paint(Graphics g) {
    g.drawString("This is in the dialog box", 10, 50);
  }    
}

// Create a subclass of Frame.
class MenuFrame extends Frame {
  String msg = "";
  CheckboxMenuItem debug, test;

  MenuFrame(String title) {
    super(title);

    // create menu bar and add it to frame
    MenuBar mbar = new MenuBar();
    setMenuBar(mbar);

    // create the menu items
    Menu file = new Menu("File");
    file.add(new MenuItem("New..."));
    file.add(new MenuItem("Open..."));
    file.add(new MenuItem("Close"));
    file.add(new MenuItem("-"));
    file.add(new MenuItem("Quit..."));
    mbar.add(file);

    Menu edit = new Menu("Edit");
    edit.add(new MenuItem("Cut"));
    edit.add(new MenuItem("Copy"));
    edit.add(new MenuItem("Paste"));
    edit.add(new MenuItem("-"));

    Menu sub = new Menu("Special", true);
    sub.add(new MenuItem("First"));
    sub.add(new MenuItem("Second"));
    sub.add(new MenuItem("Third"));
    edit.add(sub);

    // these are checkable menu items
    debug = new CheckboxMenuItem("Debug");
    edit.add(debug);
    test = new CheckboxMenuItem("Testing");
    edit.add(test);

    mbar.add(edit);
  }

  // Hide window when terminated by user.
  public boolean handleEvent(Event evtObj) {
    if(evtObj.id == Event.WINDOW_DESTROY) {
      hide();
      return true;
    }      
    return super.handleEvent(evtObj);
  }

  // Display menu choices.
  public boolean action(Event evtObj, Object arg) {
    if(evtObj.target instanceof MenuItem) {
      msg = "You selected ";

     // Activate a dialog box when New is selected. 
     if(arg.equals("New...")) {
        msg += "New.";
        SampleDialog d = new 
          SampleDialog(this, "New Dialog Box");
        d.show();
      }     

      // Try defining other dialog boxes for these options.   
      else if(arg.equals("Open..."))
        msg += "Open.";
      else if(arg.equals("Close"))
        msg += "Close.";
      else if(arg.equals("Quit..."))
        msg += "Quit.";
      else if(arg.equals("Edit"))
        msg += "Edit.";
      else if(arg.equals("Cut"))
        msg += "Cut.";
      else if(arg.equals("Copy"))
        msg += "Copy.";
      else if(arg.equals("Paste"))
        msg += "Paste.";
      else if(arg.equals("First"))
        msg += "First.";
      else if(arg.equals("Second"))
        msg += "Second.";
      else if(arg.equals("Third"))
        msg += "Third.";
      else if(arg.equals("Debug"))
        msg += "Debug.";
      else if(arg.equals("Testing"))
        msg += "Testing.";

      repaint();
      return true;
    }
    return false;
  }

  public void paint(Graphics g) {
    g.drawString(msg, 10, 140);

    if(debug.getState()) 
      g.drawString("Debug is on.", 10, 160);
    else
      g.drawString("Debug is off.", 10, 160);

    if(test.getState()) 
      g.drawString("Testing is on.", 10, 180);
    else
      g.drawString("Testing is off.", 10, 180);
  }    
}

// Create frame window.
public class DialogDemo extends Applet {
  Frame f;

  public void init() {
    f = new MenuFrame("Menu Demo");
    int width = Integer.parseInt(getParameter("width"));
    int height = Integer.parseInt(getParameter("height"));
 
    resize(width, height);

    f.show();
  }

  public void start() {
    f.show();
  }

  public void stop() {
    f.hide();
  }    
}

listing 19
/* Demonstrate File Dialog box.
 
   This is an application, not an applet.
*/
import java.awt.*;

// Create a subclass of Frame
class SampleFrame extends Frame {
  SampleFrame(String title) {
    super(title);
  }

  // Hide window when terminated by user.
  public boolean handleEvent(Event evtObj) {
    if(evtObj.id == Event.WINDOW_DESTROY) {
      System.exit(0);
      return true;
    }      
    return super.handleEvent(evtObj);
  }
}

// Create frame window.
class FileDialogDemo {
  public static void main(String args[]) {
    Frame f = new SampleFrame("File Dialog Demo");
    f.show();
    f.resize(100, 100);

    FileDialog fd = new FileDialog(f, "File Dialog");
    fd.show();
  }
}


