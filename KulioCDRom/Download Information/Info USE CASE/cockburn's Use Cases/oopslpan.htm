<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://members.aol.com/acockburn/papers/oopslpan.htm -->
<HTML><HEAD>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.2614.3500" name=GENERATOR></HEAD>
<BODY>
<H2>Alistair Cockburn</H2>
<P>Value conflicts exist legimately on software projects. Therefore, before 
intervening to change a group's values, we should create a map of the value 
systems. Ethnographic methods are necessary, but insufficient, since experience 
is needed to interpret the situations. I should like to call on experienced 
developers to apply ethnographic techniques to capture the value maps of the 
different parties, and then open discussion on intervention strategies. </P>
<P>What does that all mean? </P>
<P>In software development, different cultures work side by side. They include 
the executive sponsors, the marketing group, the managers, the users, analysts, 
UI designers, programmers, database designers, testers, etc. There are groups 
along other dimensions: the novices vs. the experts, the mathematical vs. 
intuitive designers, etc. Each group encourages its own values. Their values are 
sometimes in conflict. The cultures have forms of repulsion and protection for 
their own survival. Their values help them contibute to the project...usually, 
but occasionally not. </P>
<P>The usual approach on discovering value dissonance is to try to change the 
cultures. This means trying to get the project manager to let the programmers 
develop iteratively "until they are done". Or trying to write a one-pass 
schedule containing no time for learning and revision. It means asking the users 
or the manager to become expert on object technology, or asking informalist 
designers to use formal notations. The groups try to change each other. </P>
<P>And yet, nobody has yet described the map of the values of the groups. What 
is the successful part of a group's strategy? A classic example is programmers 
trying to keep the manager away and trying to stay out of meetings. This 
"antisocial" behavior is part of gaining think time and reducing distractions. 
It became part of the programmers' culture, a protection and a success strategy. 
What is a successful-unsuccessful value? It is the strong aversion to learning 
and using other groups' results, the "invent here and now" mandate. That value 
propels careers, but operates at the expense of the industry. </P>
<P>What else contributes to each group's success? Which of the values and 
cultural characteristics can safely be changed? Where is there harmony, where is 
there conflict between cultures? Where is the map of these different value 
systems? </P>
<P>Rather than walking into a project asserting that group A or B needs to use 
method / technique / tool / work style X, or even, walking into a project 
asserting that they all should be tolerant of each other, I should like to stake 
the position that we should spend some time finding out what the groups need, 
and how they already function. </P>
<P>What do software developers really need in the way of support for their work? 
I have not seen a decent answer to that question, nor even a decent proposal to 
research it since the brief efforts of MCC in the 1980's. Yet tool vendors, 
methodologists, and even researchers constantly suggest new solutions to the 
purported problems of the software practitioner. </P>
<P>Here I offer a mea culpa. I developed advanced software environments for 
several years, thinking I was really paying attention to the way my target group 
worked. It slowly became clear that although I was an experienced software 
designer, my knowledge of what the target group really needed was neither 
accurate nor based on facts. It was based on my guesses and wishes. I dropped 
environments for methodology to better learn developers needs. After several 
years studying projects and writing methodology, I again discovered I had made a 
guess on needs and values. This is a difficult topic. I have made three attempts 
of several years each to address the question. Each time, I discovered that I 
did not know what the real problem was, that my suggestions were based on 
guesses and wishes, not facts. On a recent project, I finally began to notice 
the astonishingly complex and fluid set of working relationships across the 
project staff. It was too difficult to document, but it began to show some 
useful information. It also revealed the need for proper ethnographic studies of 
development groups. </P>
<P>However, ethnographers have their own values, one of which seems to be 
excitement about studying cultures they do not understand at all, as opposed to 
ones they already understand somewhat. The flaw with this value is that they 
miss important cues. I am staking the additional position that experienced 
developers are needed to learn and apply ethnographic techniques. They will be 
able to spot important clues that others would miss, and will be able to 
represent the culture's values. </P>
<P>What does it take to address the question? </P>
<P>First, recognize that there are cultures on a project. They have cultural 
values, the values differ, the value systems of each have utility. We can get a 
sense of the value structures even without detailed value maps. </P>
<P>Second, find people who can work on both sides of pairs of cultures. They are 
needed to communicate, protect the essential cultural values and translate 
across major differences. </P>
<P>Third, inform each of the groups on the purposes, rationales, and values of 
the others. The groups devalue each other too often. As Jim Coplien said, for 
two cultures to communicate with each other, each must first become convinced 
the other has something to offer. </P>
<P>Finally, apply ethnographic techniques to study each group, discovering their 
strengths and weaknesses. Software groups have been producing software 
successfully for decades. Find out what works before naming changes. Use 
experienced members of each group to create their value maps.</P>
<P>In short, lay some facts on the tables, instead of the usual wishes and 
guesses. </P>
<DL>
  <DD>
  <H3>Biography</H3>
  <DD>Alistair Cockburn is methodologist and Consulting Fellow at Humans and 
  Technology. He designed the OO methodology for the IBM Consulting Group using 
  some of the techniques described in this position statement. Although these 
  techniques resulted in a methodology, a book on surviving OO projects, the 
  start of a risk management catalog and growing recognition as an expert on 
  human factors in software development, he is not even close to being 
  satisfied. Mr. Cockburn is a practioner of double-loop learning, and seems to 
  particularly enjoy sitting underwater, traveling, and forgetting languages he 
  took a lot of trouble to learn. </DD></DL></BODY></HTML>
