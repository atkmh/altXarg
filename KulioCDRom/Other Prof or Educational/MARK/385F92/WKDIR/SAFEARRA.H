// safearray.h 11/4/92#ifndef SAFEARRAY_H#define SAFEARRAY_H#include "unsafearray.h"class safearray: public unsafearray{public:	safearray( long newcellsize, long newcellcount ): unsafearray( newcellsize, newcellcount )	{	}	safearray& operator=( const safearray& a );		// copy a to *this	safearray( const safearray& a ): unsafearray( a )	{	}	~safearray()	{		delete [] data;	}	void set( long i, void* e );		// copies e to cell i 		// if i is out of range an error is generated	void get( long i, void* e ) const;		// copies contents of cell i to e		// if i is out of range an error is generated//	void print( ostream& os ) const//	{//		os << "cannot print an unsafearray";//	}	void swap( long i, long j );		// swaps cells i and j		// if i or j is out of range an error is generated	void move( long i, long j );		// copies cell j to cell i		// if i or j is  out of range an error is generated	void deletecell( long i );		// remove cell i by shifting all greater cells down		// the cellcount is unchanged		// if i is  out of range an error is generated	void insertcell( long i );		// insert new cell i by shifting all greater cells up		// the cellcount is unchagned, so last cell is lost		// if i is  out of range an error is generated};#endif