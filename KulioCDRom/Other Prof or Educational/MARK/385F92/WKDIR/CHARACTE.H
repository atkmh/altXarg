// character.h 11/6/92#ifndef character_H#define character_H#include "compthing.h"#include "error.h"class character: public compthing{protected:  char data;public:	character( char c ): compthing( "character" )	{		data = c;	}	character( const character& c ): compthing( c )	{		data = c.data;	}	~character()	{	}	void print( ostream& os ) const	{		os << data;	}	boolean operator==( const eqthing& t ) const	{		return t.isa( myclass ) && data == ((const character &)t).data;	}	boolean operator>( const compthing& t) const	{		boolean equal;		if (t.isa( myclass ))			equal = data > ((const character &)t).data;		else			error( "character::operator= cannot compare to non character" );		return equal;	}	thing* copy() const	{		return new character(*this);	}};ostream& operator<<( ostream& os, const character& c );#endif