// sequence.h 11/5/92#ifndef SEQUENCE_H#define SEQUENCE_H#include "autoarray.h"#include "mytypes.h"#include <iostream.h>#include "equatablething.h"class sequence: public autoarray, public equatablething{protected:	long itemcount;public:	sequence(): autoarray( sizeof( thing* ), 10, 10 ), equatablething( "sequence" )	{		itemcount = 0;	}	~sequence()	{	}	sequence( const sequence& s ): autoarray( s ), equatablething( "sequence" )	{		itemcount = s.itemcount;	}	sequence& operator=( const sequence& b );	void insert( long i, equatablething* t );	void remove( long i );	void removeall();	void print( ostream& os ) const;	equatablething* geti( long i ) const;	thing* copy() const;	boolean operator==( const equatablething& t ) const;};ostream& operator<<( ostream& os, sequence& s );#endif