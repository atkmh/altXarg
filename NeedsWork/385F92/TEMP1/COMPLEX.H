// complex.h 11/4/92#ifndef COMPLEX_H#define COMPLEX_H#include "equatablething.h"class complex: public equatablething{protected:	double re, im;public:	complex( double r, double i): equatablething( "complex" )	{		re = r;		im = i;	}	complex( double r ): equatablething( "complex" )	{		re = r;		im = 0;	}	complex( const complex& c): equatablething( c )	{		*this = c;	}	void print_paren( ostream& s) const;	void print_math( ostream& s) const;	complex operator+( complex );	complex operator-( complex );	complex operator-();	complex operator*( complex );	complex operator/( complex );	void print( ostream& s ) const	{		print_math( s );	}	boolean operator==( const equatablething& c ) const	{		return  c.isa( myclass ) && re == ((const complex&)c).re && im == ((const complex&)c).im;	}	thing* copy() const	{		return new complex( re, im );	}};ostream& operator<<( ostream& s, const complex& x );#endif